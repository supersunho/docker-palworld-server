name: üß™ Tests and Code Quality

on:
    # push:
    #     branches: [main, develop]
    # pull_request:
    #     branches: [main]
    workflow_dispatch:

env:
    PYTHON_VERSION: "3.12"

jobs:
    # Code quality and linting
    quality:
        name: üîç Code Quality
        runs-on: ubuntu-latest

        steps:
            - name: üì• Checkout repository
              uses: actions/checkout@v4

            - name: üêç Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_VERSION }}
                  cache: "pip"

            - name: üì¶ Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements-dev.txt

            - name: üé® Code formatting check (Black)
              run: black --check --diff src/ scripts/

            - name: üìè Linting (Flake8)
              run: flake8 src/ scripts/ --max-line-length=88 --extend-ignore=E203,W503

            - name: üîç Type checking (MyPy)
              run: mypy src/ --ignore-missing-imports

            - name: üõ°Ô∏è Security check (Bandit)
              run: bandit -r src/ -f json -o bandit-report.json || true

            - name: üìä Upload security report
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: security-report
                  path: bandit-report.json

    # Unit and integration tests
    test:
        name: üß™ Tests (Python ${{ matrix.python-version }})
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                python-version: ["3.11", "3.12"]

        steps:
            - name: üì• Checkout repository
              uses: actions/checkout@v4

            - name: üêç Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ matrix.python-version }}
                  cache: "pip"

            - name: üì¶ Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements-dev.txt

            - name: üß™ Run unit tests
              run: |
                  pytest tests/ -v \
                    --cov=src \
                    --cov-report=xml \
                    --cov-report=html \
                    --junitxml=pytest-results.xml

            - name: üìä Upload test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: test-results-${{ matrix.python-version }}
                  path: |
                      pytest-results.xml
                      htmlcov/

            - name: üìà Upload coverage to Codecov
              if: matrix.python-version == '3.12'
              uses: codecov/codecov-action@v4
              with:
                  file: ./coverage.xml
                  flags: unittests
                  name: codecov-umbrella

    # Configuration validation
    config-validation:
        name: ‚öôÔ∏è Configuration Validation
        runs-on: ubuntu-latest

        steps:
            - name: üì• Checkout repository
              uses: actions/checkout@v4

            - name: üêç Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_VERSION }}
                  cache: "pip"

            - name: üì¶ Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install PyYAML jsonschema

            - name: ‚úÖ Validate YAML configurations
              run: |
                  python -c "
                  import yaml
                  import sys

                  config_files = [
                    'config/default.yaml',
                    'docker-compose.yml',
                    'docker-compose.monitoring.yml'
                  ]

                  for file in config_files:
                    try:
                      with open(file, 'r') as f:
                        yaml.safe_load(f)
                      print(f'‚úÖ {file} is valid')
                    except Exception as e:
                      print(f'‚ùå {file} is invalid: {e}')
                      sys.exit(1)
                  "

            - name: üîç Validate Docker Compose
              run: |
                  docker-compose -f docker-compose.yml config
                  docker-compose -f docker-compose.monitoring.yml config

    # Dependency security scan
    security-scan:
        name: üõ°Ô∏è Dependency Security Scan
        runs-on: ubuntu-latest

        steps:
            - name: üì• Checkout repository
              uses: actions/checkout@v4

            - name: üîç Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "fs"
                  scan-ref: "."
                  format: "sarif"
                  output: "trivy-results.sarif"

            - name: üìä Upload Trivy scan results to GitHub Security
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: "trivy-results.sarif"

    # Test results summary
    test-summary:
        name: üìã Test Summary
        runs-on: ubuntu-latest
        needs: [quality, test, config-validation, security-scan]
        if: always()

        steps:
            - name: üìä Test Results Summary
              run: |
                  echo "## üß™ Test Results Summary" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
                  echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
                  echo "| Code Quality | ${{ needs.quality.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
                  echo "| Tests | ${{ needs.test.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
                  echo "| Configuration | ${{ needs.config-validation.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
                  echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY

            - name: ‚ùå Fail if any tests failed
              if: |
                  needs.quality.result != 'success' ||
                  needs.test.result != 'success' ||
                  needs.config-validation.result != 'success'
              run: exit 1
