name: üè∑Ô∏è Version Management

on:
    push:
        branches: [main]
        paths-ignore:
            - "docs/**"
            - "*.md"

jobs:
    version:
        name: üè∑Ô∏è Auto Version & Tag
        runs-on: ubuntu-latest
        if: "!contains(github.event.head_commit.message, '[skip ci]')"

        steps:
            - name: üì• Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: üîç Analyze commits for version bump
              id: version
              run: |
                  # Get commit messages since last tag
                  if git describe --tags --abbrev=0 >/dev/null 2>&1; then
                    LAST_TAG=$(git describe --tags --abbrev=0)
                    COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s")
                  else
                    COMMITS=$(git log --pretty=format:"%s")
                  fi

                  echo "Commits since last tag:"
                  echo "$COMMITS"

                  # Determine version bump type
                  BUMP_TYPE="patch"

                  if echo "$COMMITS" | grep -qE "^(feat|feature)(\(.+\))?!:|^.+!:|BREAKING CHANGE:"; then
                    BUMP_TYPE="major"
                  elif echo "$COMMITS" | grep -qE "^(feat|feature)(\(.+\))?:"; then
                    BUMP_TYPE="minor"
                  elif echo "$COMMITS" | grep -qE "^(fix|bugfix|perf|performance)(\(.+\))?:"; then
                    BUMP_TYPE="patch"
                  else
                    echo "No relevant changes found, skipping version bump"
                    echo "skip=true" >> $GITHUB_OUTPUT
                    exit 0
                  fi

                  echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
                  echo "Determined bump type: $BUMP_TYPE"

            - name: üè∑Ô∏è Calculate new version
              if: steps.version.outputs.skip != 'true'
              id: calc_version
              run: |
                  # Get current version
                  if git describe --tags --abbrev=0 >/dev/null 2>&1; then
                    CURRENT_VERSION=$(git describe --tags --abbrev=0 | sed 's/^v//')
                  else
                    CURRENT_VERSION="0.0.0"
                  fi

                  echo "Current version: $CURRENT_VERSION"

                  # Split version into parts
                  IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
                  MAJOR=${VERSION_PARTS[0]:-0}
                  MINOR=${VERSION_PARTS[1]:-0}
                  PATCH=${VERSION_PARTS[2]:-0}

                  # Bump version based on type
                  case "${{ steps.version.outputs.bump_type }}" in
                    major)
                      MAJOR=$((MAJOR + 1))
                      MINOR=0
                      PATCH=0
                      ;;
                    minor)
                      MINOR=$((MINOR + 1))
                      PATCH=0
                      ;;
                    patch)
                      PATCH=$((PATCH + 1))
                      ;;
                  esac

                  NEW_VERSION="$MAJOR.$MINOR.$PATCH"
                  echo "New version: $NEW_VERSION"
                  echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

            - name: üè∑Ô∏è Create and push tag
              if: steps.version.outputs.skip != 'true'
              run: |
                  NEW_VERSION="${{ steps.calc_version.outputs.new_version }}"

                  # Configure git
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"

                  # Create tag
                  git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION

                  Auto-generated release based on conventional commits.
                  Bump type: ${{ steps.version.outputs.bump_type }}

                  Built from commit: ${{ github.sha }}"

                  # Push tag
                  git push origin "v$NEW_VERSION"

                  echo "‚úÖ Created and pushed tag v$NEW_VERSION"
