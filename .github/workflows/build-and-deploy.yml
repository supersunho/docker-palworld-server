name: üê≥ Build and Deploy

on:
    # push:
    #     tags: ["v*"]
    # release:
    #     types: [published]
    workflow_dispatch:
        inputs:
            version:
                description: "Version (e.g., v1.2.3)"
                required: false
                default: "0.1.0"
                type: string

env:
    REGISTRY_DOCKERHUB: docker.io
    REGISTRY_GHCR: ghcr.io
    IMAGE_NAME_GHCR: ${{ github.repository }}/${{ github.event.repository.name }}
    IMAGE_NAME_DOCKERHUB: supersunho/palworld-server

jobs:
    # Generate build metadata
    metadata:
        name: üìã Generate Metadata
        runs-on: ubuntu-latest
        outputs:
            version: ${{ steps.meta.outputs.version }}
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            digest: ${{ steps.meta.outputs.digest }}

        steps:
            - name: üì• Checkout repository
              uses: actions/checkout@v4

            - name: üè∑Ô∏è Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: |
                      ${{ env.REGISTRY_DOCKERHUB }}/supersunho/${{ env.IMAGE_NAME_GHCR }}
                      ${{ env.REGISTRY_GHCR }}/${{ env.REPOSITORY_NAME }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=semver,pattern={{version}}
                      type=semver,pattern={{major}}.{{minor}}
                      type=semver,pattern={{major}}
                      type=sha,prefix={{branch}}-
                  labels: |
                      org.opencontainers.image.title=Palworld Dedicated Server
                      org.opencontainers.image.description=Palworld Dedicated Server with FEX emulation for ARM64
                      org.opencontainers.image.vendor=supersunho
                      maintainer=supersunho

    # Build for each platform using matrix strategy
    build:
        name: üî® Build (${{ matrix.platform }})
        runs-on: ubuntu-latest
        needs: metadata
        strategy:
            fail-fast: false
            matrix:
                arch:
                    - "arm64"
                platform:
                    - linux/arm64

        steps:
            - name: üì• Checkout repository
              uses: actions/checkout@v4

            - name: üèóÔ∏è Prepare platform variables
              run: |
                  platform=${{ matrix.platform }}
                  echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

            - name: üê≥ Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: üîß Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
              with:
                  driver-opts: |
                      network=host
                      image=moby/buildkit:buildx-stable-1

            - name: üîê Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY_DOCKERHUB }}
                  username: ${{ vars.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: üîê Login to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY_GHCR }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: üî® Build and push by digest
              id: build
              uses: docker/build-push-action@v5
              with:
                  context: .
                  platforms: ${{ matrix.platform }}
                  labels: ${{ needs.metadata.outputs.labels }}
                  cache-from: type=gha,scope=build-${{ github.event.inputs.version }}-${{ matrix.arch }}
                  cache-to: type=gha,mode=max,scope=build-${{ github.event.inputs.version }}-${{ matrix.arch }}
                  tags: |
                      ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME_GHCR }}:${{ github.event.inputs.version }}-${{ matrix.arch }}
                      ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME_GHCR }}:latest-${{ matrix.arch }}
                      ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME_DOCKERHUB }}:${{ github.event.inputs.version }}-${{ matrix.arch }}
                      ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME_DOCKERHUB }}:latest-${{ matrix.arch }}

                  build-args: |
                      BUILDKIT_INLINE_CACHE=1

            - name: üìÑ Export digest
              run: |
                  mkdir -p /tmp/digests/${{ matrix.arch }}
                  echo "${{ steps.build.outputs.digest }}" > /tmp/digests/${{ matrix.arch }}/digest.txt
                  echo "üìù Digest saved for ${{ matrix.arch }}"

            - name: üì§ Upload digest artifact
              uses: actions/upload-artifact@v4
              with:
                  name: digests-${{ matrix.arch }}
                  path: /tmp/digests/${{ matrix.arch }}/digest.txt
                  retention-days: 1
    # Merge all platform builds into manifest lists
    merge:
        name: üîó Merge Multi-Platform Images
        runs-on: ubuntu-latest
        needs: [metadata, build]

        steps:
            - name: üì• Download all digest artifacts
              uses: actions/download-artifact@v4
              with:
                  path: /tmp/digests
                  pattern: digests-*
                  merge-multiple: false

            - name: üîç Debug Check downloaded artifacts
              run: |
                  echo "üîç Debugging artifact download..."
                  echo "üìÅ Contents of /tmp/digests:"
                  ls -la /tmp/digests/ || echo "‚ùå /tmp/digests directory not found"

                  echo ""
                  echo "üìÇ Checking individual architecture directories:"
                  for arch in amd64 arm64 armv7; do
                    if [ -d "/tmp/digests/$arch" ]; then
                      echo "‚úÖ $arch directory exists"
                      if [ -f "/tmp/digests/digests-$arch/digest.txt" ]; then
                        echo "  üìÑ digest.txt exists: $(cat /tmp/digests/digests-$arch/digest.txt)"
                      else
                        echo "  ‚ùå digest.txt missing"
                      fi
                    else
                      echo "‚ùå $arch directory not found"
                    fi
                  done

                  echo ""
                  echo "üóÇÔ∏è All files in /tmp/digests:"
                  find /tmp/digests -type f 2>/dev/null || echo "No files found"

            - name: üõ†Ô∏è Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: üîë Login to GHCR
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY_GHCR }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: üîë Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: üè∑Ô∏è Create multi-arch manifests with auto-detection
              run: |
                  VERSION="${{ github.event.inputs.version }}"
                  echo "üì¶ Creating multi-arch manifests for automatic architecture detection..."
                  echo "üéØ Target version: $VERSION"


                  # Verify all architecture images exist
                  AVAILABLE_ARCHS=""
                  for arch in amd64 arm64 armv7; do
                    if [ -f "/tmp/digests/digests-$arch/digest.txt" ]; then
                      AVAILABLE_ARCHS="$AVAILABLE_ARCHS $arch"
                      echo "‚úÖ Confirmed $arch image availability"
                    else
                      echo "‚ö†Ô∏è $arch image not found, skipping"
                    fi
                  done

                  if [ -z "$AVAILABLE_ARCHS" ]; then
                    echo "‚ùå No architecture images found, cannot create manifests"
                    echo "üîç This usually means:"
                    echo "   1. Build job was skipped due to existing images"
                    echo "   2. Force rebuild option should be enabled"
                    echo "   3. Digest artifacts were not properly uploaded"
                    exit 1
                  fi

                  echo "üéØ Available architectures:$AVAILABLE_ARCHS"

                  # Rest of the manifest creation logic...
                  for registry in ghcr dockerhub; do
                    if [ "$registry" = "ghcr" ]; then
                      PREFIX="${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME_GHCR }}"
                    else
                      PREFIX="${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME_DOCKERHUB }}"
                    fi
                    
                    ARCH_IMAGES=""
                    LATEST_ARCH_IMAGES=""
                    
                    for arch in $AVAILABLE_ARCHS; do
                      ARCH_IMAGES="$ARCH_IMAGES ${PREFIX}:${VERSION}-${arch}"
                      LATEST_ARCH_IMAGES="$LATEST_ARCH_IMAGES ${PREFIX}:latest-${arch}"
                    done
                    
                    echo "üèóÔ∏è Creating version manifest: ${PREFIX}:${VERSION}"
                    docker buildx imagetools create \
                      --tag ${PREFIX}:${VERSION} \
                      $ARCH_IMAGES
                    
                    echo "üèóÔ∏è Creating latest manifest: ${PREFIX}:latest"
                    docker buildx imagetools create \
                      --tag ${PREFIX}:latest \
                      $LATEST_ARCH_IMAGES
                    
                    echo "‚úÖ Multi-arch manifests created for $registry"
                  done

    # Create GitHub release with assets
    release:
        name: üì¶ Create Release
        runs-on: ubuntu-latest
        needs: [metadata, merge]
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

        steps:
            - name: üì• Checkout repository
              uses: actions/checkout@v4

            - name: üìã Generate release notes
              id: release_notes
              run: |
                  echo "## üê≥ Docker Images" >> release_notes.md
                  echo "" >> release_notes.md
                  echo "### Docker Hub" >> release_notes.md
                  echo "\`\`\`bash" >> release_notes.md
                  echo "docker pull ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME_DOCKERHUB }}:${{ needs.metadata.outputs.version }}" >> release_notes.md
                  echo "\`\`\`" >> release_notes.md
                  echo "" >> release_notes.md
                  echo "### GitHub Container Registry" >> release_notes.md
                  echo "\`\`\`bash" >> release_notes.md
                  echo "docker pull ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME_GHCR }}:${{ needs.metadata.outputs.version }}" >> release_notes.md
                  echo "\`\`\`" >> release_notes.md
                  echo "" >> release_notes.md
                  echo "## üèóÔ∏è Supported Architectures" >> release_notes.md
                  echo "- linux/amd64" >> release_notes.md
                  echo "- linux/arm64" >> release_notes.md
                  echo "" >> release_notes.md
                  echo "## üìã What's Changed" >> release_notes.md
                  echo "<!-- Add your changelog here -->" >> release_notes.md

            - name: üì¶ Create GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  body_path: release_notes.md
                  draft: false
                  prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
                  generate_release_notes: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Deployment summary
    summary:
        name: üìä Deployment Summary
        runs-on: ubuntu-latest
        needs: [metadata, merge, release]
        if: always()

        steps:
            - name: üìä Create deployment summary
              run: |
                  echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### üìã Build Information" >> $GITHUB_STEP_SUMMARY
                  echo "- **Version:** ${{ needs.metadata.outputs.version }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
                  echo "- **Registries:** Docker Hub, GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### üê≥ Docker Images" >> $GITHUB_STEP_SUMMARY
                  echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                  echo "${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME_DOCKERHUB }}:${{ needs.metadata.outputs.version }}" >> $GITHUB_STEP_SUMMARY
                  echo "${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME_GHCR }}:${{ needs.metadata.outputs.version }}" >> $GITHUB_STEP_SUMMARY
                  echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### ‚úÖ Status" >> $GITHUB_STEP_SUMMARY
                  echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
                  echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
                  echo "| Build | ${{ needs.merge.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
                  echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
                  echo "| Release | ${{ needs.release.result == 'success' && '‚úÖ Success' || (needs.release.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }} |" >> $GITHUB_STEP_SUMMARY
